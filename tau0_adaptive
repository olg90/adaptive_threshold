#%%
import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from numpy import exp
from numpy import sqrt as Sqrt
from numpy import log as Log

def simulate(n, v, f, pr, M, k, c, vth, tmax, delta_t):

    nlist=[]
    vlist=[]
    tlist=[]
    prelist=[]
    postlist=[]

    tplot=[]
    vplot=[]
    nplot=[]

    postvth=[]

    tcurr=0
    ratio = 0
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f) # action potential
        t1=exponential(1/(k*(M-n) + 1e-6)) # site gets occupied
        t2 = timer

        if t0 < t1 and t0 < t2: # AP occurrs
            b = binomial(n, pr)
            n-=b
            v=c*b
            tmin = t0
            timer-=tmin
            prelist.append(tcurr+tmin)

        elif t1<t0 and t1<t2: # add a docked vesicle
            n+=1
            tmin = t1
            timer-=tmin

        else:
            tmin=t2
            timer = delta_t
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                tlist.append(tcurr)

        tplot.append(tcurr)
        vplot.append(v)
        nplot.append(n)

        tcurr += tmin
        if v>=vth:
            postlist.append(tcurr)
            postvth.append(vth)
        v=0

    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    CVT2=np.var(Tlist)/Tmean**2
    FFn=np.var(nlist)/np.mean(nlist)
    FFv=np.var(vlist)/np.mean(vlist)

    return tlist, nlist, vlist, prelist, postlist, Tmean, CVT2, FFn, FFv,\
        tplot, vplot, nplot, postvth
        

def simulate2(n, v, f, pr, M, k, c, vth, tauv, tauvth, vthb, cvth, cv, alpha, tmax, delta_t):

    nlist=[]
    vlist=[]
    vthlist=[]
    tlist=[]
    prelist=[]
    postlist=[]

    tplot=[]
    vplot=[]
    nplot=[]
    vthplot=[]

    postvth=[]

    tcurr=0
    ratio = 0
    timer = delta_t
    while tcurr < tmax:
        t0=exponential(1/f) # action potential
        t1=exponential(1/(k*(M-n) + 1e-6)) # site gets occupied
        t2 = timer

        if t0 < t1 and t0 < t2: # AP occurrs
            b = binomial(n, pr)
            n-=b
            v+=c*b
            tmin = t0
            timer-=tmin
            prelist.append(tcurr+tmin)

        elif t1<t0 and t1<t2: # add a docked vesicle
            n+=1
            tmin = t1
            timer-=tmin

        else:
            tmin=t2
            timer = delta_t
            if tcurr >= ratio*tmax:
                nlist.append(n)
                vlist.append(v)
                vthlist.append(vth)
                tlist.append(tcurr)

        tplot.append(tcurr)
        vplot.append(v)
        nplot.append(n)
        vthplot.append(vth)

        tcurr += tmin
        if v>=vth:
            postlist.append(tcurr)
            postvth.append(vth)
            vth=get_vth(vth, v, cvth, alpha, cv)
        v=0

        # Update the continuous dynamics
        vth=vthb+(vth-vthb)*np.exp(-tmin/tauvth)

    Tlist = np.diff(postlist)
    Tmean = np.mean(Tlist)
    CVT2=np.var(Tlist)/Tmean**2
    FFn=np.var(nlist)/np.mean(nlist)
    FFv=np.var(vlist)/np.mean(vlist)

    return tlist, nlist, vlist, vthlist, prelist, postlist, Tmean, CVT2, FFn, FFv,\
        tplot, vplot, nplot, vthplot, postvth

def get_vth(vth, v, cvth, alpha, cv):
    return vth+cvth*(v/cv)**alpha
 
###############################################################################
#
#                               Main code
#
###############################################################################



f=100
pr=0.2
M=100
k=20
c=0.015

n=0 # occupied states
v=0
vth=0.2

delta_t = 0.01
tmax = 30 # <-------------- TMAX
navgs=3

vthlist = [0.2]
xlist=np.linspace(0,200,100)

# =============================================================================
# res = simulate(n, v, f, pr, M, k, c, vth, tmax, delta_t)
# plt.plot(res[9], res[10])
# #%%
# 
# =============================================================================
def getres(vallist, xlist):
    tavgs=[]
    for val in vallist:
        vth=val
        tavg=[]
        for j, x in enumerate(xlist):
            f=x
            tmean=[]
            for i in range(navgs):
                print(j, len(xlist), i, navgs)
                res=simulate(n, v, f, pr, M, k, c, vth, tmax, delta_t)
                tmean.append(res[6])
            tavg.append(np.mean(tmean))
        tavgs.append(tavg)
    return np.array(tavgs)

tavgs=getres(vthlist, xlist)

for i in range(len(vthlist)):
    plt.plot(xlist, 1/tavgs[i], label="vth={}".format(vthlist[i]))
plt.legend()
plt.show()

#%% Sim 2
f=100
pr=0.2
M=100
k=10
c=0.01
tauv=1
tauvth=0.01

n=0 # occupied states
v=0

vthb=0.1
vth=vthb

# alpha = 0  constant jumps
# cvth = 0  fixed threshold

cvth=0.01
alpha=0
cv=vthb #0.1

delta_t = 0.01
tmax = 30 # <-------------- TMAX

navgs=20

vthlist = [0.1, 0.12, 0.14]
xlist=np.linspace(0,200,100)

# =============================================================================
# res = simulate(n, v, f, pr, M, k, c, vth, tmax, delta_t)
# plt.plot(res[9], res[10])
# #%%
# 
# =============================================================================
def getres(vallist, xlist):
    tavgs=[]
    for ii, val in enumerate(vallist):
        vthb=val
        tavg=[]
        for j, x in enumerate(xlist):
            f=x
            tmean=[]
            for i in range(navgs):
                print(ii, len(vallist), j, len(xlist), i, navgs)
                res=simulate2(n, v, f, pr, M, k, c, vth, tauv, tauvth, vthb, cvth, cv, alpha, tmax, delta_t)
                tmean.append(res[6])
            tavg.append(np.mean(tmean))
        tavgs.append(tavg)
    return np.array(tavgs)

tavgs=getres(vthlist, xlist)

for i in range(len(vthlist)):
    plt.plot(xlist, 1/tavgs[i], label="vth={}".format(vthlist[i]))
plt.legend()
plt.show() 
